{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAIMC,EAAkBC,SAASC,cAAc,gBACzCC,EAAYF,SAASC,cAAc,eACnCE,EAAcH,SAASC,cAAc,iBACrCG,EAASJ,SAASC,cAAc,QAChCI,EAAaL,SAASC,cAAc,iBAGtCK,EAAkB,EAClBC,EAAY,EACZC,EAAc,EAIlBJ,EAAOK,iBAAiB,SAExB,SAAqBC,GACnBJ,EAAkBP,EAAgBY,MAClCJ,EAAYL,EAAUS,MACtBH,EAAcL,EAAYQ,SAG5BN,EAAWI,iBAAiB,SAE5B,SAAuBC,GACrBA,EAAEE,iBAuBwBC,EAtBPP,EAsBmBQ,EAtBFP,EAsBQQ,EAtBGP,EAuBzCQ,EAAU,EAEVC,EAAaC,KAAKC,MAGtBC,YAAW,WAEP,IAAMC,EAAWC,aAAY,WAzBrC,IAAuBC,EAAUC,EACzBC,GAyBET,GAAW,GACED,EACXW,cAAcL,IA5BHE,EA+BCP,EA/BSQ,EA+BAP,EA9BzBQ,EAAgBE,KAAKC,SAAW,GAE/B,IAAIC,SAAQ,SAACC,EAASC,GAExBN,EACDK,EAAS,qBAAmCE,OAAfT,EAAS,QAAyBS,OAAnBd,KAAKC,MAAQK,EAAM,OAG/DO,EAAQ,oBAAkCC,OAAfT,EAAS,QAAyBS,OAAnBd,KAAKC,MAAQK,EAAM,WAuBxDS,MAAK,SAAAH,GAAcjC,EAAAqC,OAAOC,QAAQL,GAAUM,QAAQC,IAAIP,MACxDQ,OAAM,SAAAC,GAAW1C,EAAAqC,OAAOM,QAAQD,GAAQH,QAAQC,IAAIE,QAEtDzB,KAGFD,GArBP,IAA4BA,EAAYC,EAAMC,EACtCC,EAEAC","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n\n\nconst firstDelayInput = document.querySelector('[name=delay]');\nconst stepInput = document.querySelector('[name=step]');\nconst amountInput = document.querySelector('[name=amount]');\nconst formEl = document.querySelector('form');\nconst sumbmitBtn = document.querySelector('[type=submit]');\n\n\nlet firstDelayValue = 0;\nlet stepValue = 0;\nlet amountValue = 0;\n\n\n\nformEl.addEventListener('input', onFormInput);\n\nfunction onFormInput(e) {\n  firstDelayValue = firstDelayInput.value;\n  stepValue = stepInput.value;\n  amountValue = amountInput.value;\n}\n\nsumbmitBtn.addEventListener('click', onSubmitClick);\n\nfunction onSubmitClick(e) {\n  e.preventDefault();\n  callCreatePromises(firstDelayValue, stepValue, amountValue);\n}\n\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n\n    if(shouldResolve){\n      resolve(`Fulfilled promise ${position} in ${Date.now() - delay}ms`)\n    }\n    else {\n      reject(`Rejected promise ${position} in ${Date.now() - delay}ms`)\n    }\n  \n  });\n};\n\n\n\nfunction callCreatePromises(firstDelay, step, amount) {\n    let counter = 0\n\n  const timeBefore = Date.now()\n\n\n    setTimeout(() => {\n\n        const timerId2 = setInterval(() => {\n          counter += 1;\n          if(counter > amount) {\n            clearInterval(timerId2);\n            return\n          }\n          createPromise(counter, timeBefore)\n          .then(resolve => {  Notify.success(resolve); console.log(resolve)} )\n          .catch(error => { Notify.failure(error); console.log(error)});\n    \n      }, step)\n\n    \n    }, firstDelay)\n}\n\n\n\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$firstDelayInput","document","querySelector","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$formEl","$ce04d3a99e08e73b$var$sumbmitBtn","$ce04d3a99e08e73b$var$firstDelayValue","$ce04d3a99e08e73b$var$stepValue","$ce04d3a99e08e73b$var$amountValue","addEventListener","e","value","preventDefault","firstDelay","step","amount","counter","timeBefore","Date","now","setTimeout","timerId2","setInterval","position","delay","shouldResolve","clearInterval","Math","random","Promise","resolve","reject","concat","then","Notify","success","console","log","catch","error","failure"],"version":3,"file":"03-promises.fed6f0a1.js.map"}