{"mappings":"AACA,SAASA,WAAWC,GAElB,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC7B,IAAMC,EAAgBC,KAAKC,SAAW,GAGtCC,YAAW,WACJH,EACDF,EAAQ,CAACF,SAAAA,EAAUQ,MAJX,MAMRL,EAAO,CAACH,SAAAA,EAAUQ,MANV,QAAA,QA+BhB,IAAMC,OAAS,CACb,IACA,IACA,KAGIC,SAAWD,OAAOE,IAAIZ,YAE5Ba,QAAQC,IAAIH,UAGZT,QAAQa,IAAIJ,UACXK,MAAM,SAAAC,GAAOJ,QAAQC,IAAIG,MACzBC,OAAM,SAAAC,GAAMN,QAAQC,IAAIK","sources":["src/js/03-promises.js"],"sourcesContent":["\nfunction runPromise(position) {\n  \n  return new Promise((resolve, reject) => {\n  const shouldResolve = Math.random() > 0.1;\n  const delay = 200\n  \n  setTimeout(() => {\n      if(shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n      \n    }, delay);\n\n});\n}\n\n// runPromise('2', '200')\n// .then(({ position, delay }) => {\n//       console.log(`✅ Fulfilled promise ${position} in ${delay}ms`)\n//    })\n// .catch(({ position, delay }) => {\n//       console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//     });\n\n    // runPromise('2')\n    // .then(({ position, delay }) => {\n    //       console.log(`✅ Fulfilled promise ${position} in ${delay}ms`)\n    //    })\n    // .catch(({ position, delay }) => {\n    //       console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    //     });\n\n\nconst horses = [\n  '1',\n  '2',\n  '3'\n];\n\nconst promises = horses.map(runPromise);\n\nconsole.log(promises);\n\n\nPromise.all(promises)\n.then( y  => {console.log(y)})\n.catch(x => {console.log(x)})\n\n\n\n\n// .then(({ position, delay }) => {console.log(`✅ Fulfilled promise ${position} in ${delay}ms`)})\n// .catch(({ position, delay }) => {\n//         console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//       });\n\n// .then(({ position, delay }) => {\n//   console.log(`✅ Fulfilled promise ${position} in ${delay}ms`)\n// })\n// .catch(({ position, delay }) => {\n//   console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n// });\n\n// runPromise([0])\n// .then(({ position, delay }) => {\n//   console.log(`✅ Fulfilled promise ${position} in ${delay}ms`)\n// })\n// .catch(({ position, delay }) => {\n//   console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n// });\n\n// runPromise([1])\n// .then(({ position, delay }) => {\n//   console.log(`✅ Fulfilled promise ${position} in ${delay}ms`)\n// })\n// .catch(({ position, delay }) => {\n//   console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n// });\n    \n\n\n// / createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n// function onFullfilled(result) {\n//   console.log(`+ ${result}`);\n// }\n// function onRejected(error) {\n//   console.log(`- ${error}`);\n// }\n\n\n// console.log(horses);\n\n// const promises = horses.map(createPromise);\n// // console.log(promises);\n\n// console.log(Promise.all(promises))\n\n\n\n  // }, )\n\n\n\n  // if (shouldResolve) {\n  //   // Fulfill\n  // } else {\n  //   // Reject\n  // }\n// }\n\n\n\n\n\n\n\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//   } else {\n//     // Reject\n//   }\n// }\n\n\n\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n\n\n\n\n// function run(name) {\n//   return new Promise((resolve) => {\n//     const time = getRandomTime(1000, 1500)\n\n//     setTimeout(() => {\n//         resolve({name, time})\n//     }, time)\n//   })\n// }\n\n// run('qwe')\n// .then(x => console.log(x))\n// .catch(e => console.log(e))\n\n\n// function getRandomTime(min, max) {\n//   return Math.floor(Math.random() * (max - min + 1) + min);\n  \n// }\n\n\n\n\n\n\n\n\n// const promise = new Promise((resolve, reject) => {\n//   const canFullfilled = Math.random() > 0.5;\n\n//   setTimeout(() => {\n//       if(canFullfilled) {\n//         resolve('can resolve');\n//       }\n//       reject('error');\n  \n//     }, 1000)\n// })\n\n// // promise.then(\n// //   result => {\n// //   console.log(`+ ${result}`);\n// // },\n// // error => {\n// //   console.log(`- ${error}`);\n// // })\n\n// // promise.then(onFullfilled, onRejected);\n\n// function onFullfilled(result) {\n//   console.log(`+ ${result}`);\n// }\n// function onRejected(error) {\n//   console.log(`- ${error}`);\n// }\n\n\n\n// promise\n//   .then(onFullfilled)\n//   .then(x => {\n//     console.log(x);\n//     return 10;\n//   })\n//   .then(y => {\n//     console.log(y);\n//   })\n// //   .catch(error => console.log(error))\n// //   .finally(() => console.log('finally'));\n\n// const makeOrder = dish => {\n//   const DELAY = 1000;\n\n//   return new Promise((resolve, reject) => {\n//      const passed = Math.random() > 0.5;\n\n\n//      setTimeout(() => {\n//        if(passed) {\n//          resolve(`vot bludo ${dish}`);\n//        }\n\n//        reject('nema bluda');\n//      }, DELAY);\n//   });\n//   // return promise;\n// };\n\n\n\n// // const p = makeOrder('pirozhok');\n// makeOrder('pirozhok').then(onSuccess).catch(onError);\n\n// function onSuccess(result) {\n//   console.log(result);\n// };\n// function onError(error) {\n//   console.log(error);\n// }"],"names":["runPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","delay","horses","promises","map","console","log","all","then","y","catch","x"],"version":3,"file":"03-promises.9a01e16b.js.map"}